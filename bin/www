#!/usr/bin/env node

//Module dependencies

var app = require('../app');
var debug = require('debug')('wordofmouth-server:server');
var http = require('http');
const mongoose = require('mongoose');

//Get port from environment and store in Express.

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//Create the server

const server = http.createServer(app);

// MongoDB connection setup

const uri = "mongodb+srv://eguenther:yA5PwYwH2CvWkK77@cluster0.tjk98an.mongodb.net/";

const options = {
  dbName: "alpha", // Specify the database name
  useNewUrlParser: true,
  useUnifiedTopology: true,
};

(async () => {
  try {
    await mongoose.connect(uri, options);
    console.log('Successfully connected to MongoDB Atlas');
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  } catch (error) {
    console.log('Error connecting to MongoDB Atlas:', error);
    process.exit(1);
  }
})();

//Normalize a port into a number, string, or false

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

//Event listener for HTTP server "error" event

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

//Event listener for HTTP server "listening" event

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
